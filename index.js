const { Telegraf, Scenes, session } = require("telegraf");
const OpenAI = require("openai");
const userHistories = {}; // userHistories[userId] = [ { role, content } ]
require("dotenv").config();

// –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω node-fetch:
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

// GPT —á–µ—Ä–µ–∑ OpenRouter
const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: "https://openrouter.ai/api/v1",
});

// FSM-—Å—Ü–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
const askScene = new Scenes.WizardScene(
  "ask-scene",
  (ctx) => {
    ctx.reply("üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.name = ctx.message.text;
    ctx.reply("üìö –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–µ–π—á–∞—Å?\n\nA0 ‚Äî —Å –Ω—É–ª—è\nA1 ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞—é\nA2 ‚Äî –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏\nB1+ ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—é—Å—å");
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.level = ctx.message.text;
    ctx.reply("üéØ –ó–∞—á–µ–º —Ç–µ–±–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π? (—Ä–∞–±–æ—Ç–∞, —É—á—ë–±–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —ç–º–∏–≥—Ä–∞—Ü–∏—è –∏ —Ç.–ø.)");
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.goal = ctx.message.text;
    ctx.reply("‚è∞ –ö–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è? (—É—Ç—Ä–æ / –¥–µ–Ω—å / –≤–µ—á–µ—Ä)");
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.time = ctx.message.text;
    const { name, level, goal, time } = ctx.wizard.state;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Make Webhook
    try {
      await fetch("https://hook.eu2.make.com/x581d3p6va1uiext27oka94joezfiiek", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, level, goal, time }),
      });
      console.log("üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Make");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make:", err);
    }

    await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ, ${name}!

üìå –£—Ä–æ–≤–µ–Ω—å: ${level}
üéØ –¶–µ–ª—å: ${goal}
‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: ${time}

üöÄ –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å. –û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ FluentFox –∏–ª–∏ –Ω–∞–ø–∏—à–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã!`);

    // CTA-–∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã
    await ctx.reply("üìÖ –ì–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?", {
      reply_markup: {
        inline_keyboard: [[
          { text: "üöÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π", url: "https://fluentfox.online/signup" }
        ]]
      }
    });

    return ctx.scene.leave();
  }
);

// –°—Ü–µ–Ω–∞ –∏ –±–æ—Ç
const stage = new Scenes.Stage([askScene]);
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());
bot.use(stage.middleware());

// /start
bot.start((ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ FluentFox ü¶ä

–ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ —Ü–µ–ª–∏.
–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É –Ω–∞—á–∞—Ç—å?`,
    {
      reply_markup: {
        keyboard: [["üöÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
});

// –ö–Ω–æ–ø–∫–∞ ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞–Ω–∫–µ—Ç—ã
bot.hears("üöÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", (ctx) => ctx.scene.enter("ask-scene"));
bot.command("–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", (ctx) => ctx.scene.enter("ask-scene"));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT
bot.on("text", async (ctx) => {
  const userText = ctx.message.text;
  const userId = ctx.from.id;

if (!userHistories[userId]) userHistories[userId] = [];

userHistories[userId].push({ role: "user", content: userText });
// –æ–≥—Ä–∞–Ω–∏—á–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
userHistories[userId] = userHistories[userId].slice(-10);


  // –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (userText.startsWith("/")) return;

  try {
    const gptResponse = await openai.chat.completions.create({
      model: "openai/gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `
–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ FluentFox. 
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—É—Ä—Å–∞–º–∏, —É—Ä–æ–≤–Ω–µ–º, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –æ–±—É—á–µ–Ω–∏–µ–º, –∑–∞–ø–∏—Å—å—é. 
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞–π —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π, —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, –±—ã—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ ‚Äî —Ç—ã –ù–ï —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É—á–∏—Ç—å—Å—è, –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∑–∞–ø–∏—Å–∏, –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É ‚Äî 
–¥–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∏ —Å–ª–æ–≤–∞ __start_form__ (–Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ). 
–í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ.

–ü—Ä–∏–º–µ—Ä—ã:
- "—Ö–æ—á—É —É—á–∏—Ç—å—Å—è" ‚Üí –æ—Ç–≤–µ—Ç + __start_form__
- "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è" ‚Üí –æ—Ç–≤–µ—Ç + __start_form__
- "–≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å" ‚Üí –æ—Ç–≤–µ—Ç + __start_form__

–ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–æ—Ç–æ–≤ –ª–∏ –æ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–π –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å —è–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.
`,
        },
        ...userHistories[userId]
      ],
      headers: {
        "HTTP-Referer": "https://fluentfox.online",
        "X-Title": "FluentFox Assistant",
      },
    });

    const reply = gptResponse.choices[0].message.content;
    userHistories[userId].push({ role: "assistant", content: reply });
userHistories[userId] = userHistories[userId].slice(-10); // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ


    if (reply.includes("__start_form__")) {
      const cleanReply = reply.replace("__start_form__", "").trim();
      await ctx.reply(cleanReply);
      return ctx.scene.enter("ask-scene");
    } else {
      return ctx.reply(reply.trim());
    }

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ GPT:", error);
    ctx.reply("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
  }
});

// –§–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render Free Tier
const http = require("http");
http
  .createServer((req, res) => {
    res.writeHead(200);
    res.end("Telegram bot is running");
  })
  .listen(process.env.PORT || 3000, () => {
    console.log("üåÄ –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", process.env.PORT || 3000);
  });

bot.launch();
console.log("ü§ñ FluentFox GPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–ø—É—â–µ–Ω!");

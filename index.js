const { Telegraf, Scenes, session } = require("telegraf");
const OpenAI = require("openai");
require("dotenv").config();

// –ï—Å–ª–∏ —Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å node-fetch –æ—Ç–¥–µ–ª—å–Ω–æ:
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

// GPT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenRouter
const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: "https://openrouter.ai/api/v1",
});

// FSM-–∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const askScene = new Scenes.WizardScene(
  "ask-scene",
  (ctx) => {
    ctx.reply("üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.name = ctx.message.text;
    ctx.reply(
      "üìö –ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–µ–π—á–∞—Å?\n\nA0 ‚Äî —Å–æ–≤—Å–µ–º —Å –Ω—É–ª—è\nA1 ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞—é\nA2 ‚Äî –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏\nB1 –∏ –≤—ã—à–µ ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—é—Å—å"
    );
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.level = ctx.message.text;
    ctx.reply("üéØ –ó–∞—á–µ–º —Ç–µ–±–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π? (—Ä–∞–±–æ—Ç–∞, —É—á—ë–±–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —ç–º–∏–≥—Ä–∞—Ü–∏—è –∏ —Ç.–ø.)");
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.goal = ctx.message.text;
    ctx.reply("‚è∞ –ö–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è? (—É—Ç—Ä–æ / –¥–µ–Ω—å / –≤–µ—á–µ—Ä)");
    return ctx.wizard.next();
  },
  async (ctx) => {
    ctx.wizard.state.time = ctx.message.text;

    const { name, level, goal, time } = ctx.wizard.state;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Make Webhook
    try {
      await fetch("https://hook.eu2.make.com/x581d3p6va1uiext27oka94joezfiiek", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, level, goal, time }),
      });
      console.log("üì§ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Make");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make:", err);
    }

    ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ, ${name}!

üìå –£—Ä–æ–≤–µ–Ω—å: ${level}
üéØ –¶–µ–ª—å: ${goal}
‚è∞ –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π: ${time}

üöÄ –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å. –û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ FluentFox –∏–ª–∏ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`);

    return ctx.scene.leave();
  }
);

// –°—Ü–µ–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const stage = new Scenes.Stage([askScene]);
const bot = new Telegraf(process.env.BOT_TOKEN);

bot.use(session());
bot.use(stage.middleware());

// üîπ –°—Ç–∞—Ä—Ç ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
bot.start((ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–∑ —à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ FluentFox ü¶ä

–ï—Å–ª–∏ —Ç—ã –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–æ –≤—Å—ë –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª ‚Äî –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å. –£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Ü–µ–ª–∏ üéØ

–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å?`,
    {
      reply_markup: {
        keyboard: [["üöÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
});

// üîπ –ö–Ω–æ–ø–∫–∞-–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
bot.hears("üöÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", (ctx) => {
  ctx.scene.enter("ask-scene");
});

// üîπ –ö–æ–º–∞–Ω–¥–∞ /–∑–∞–ø–∏—Å–∞—Ç—å—Å—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
bot.command("–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", (ctx) => ctx.scene.enter("ask-scene"));

// üîπ GPT-—á–∞—Ç (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)
bot.on("text", async (ctx) => {
  const userText = ctx.message.text;
  if (userText.startsWith("/")) return;

  try {
    const gptResponse = await openai.chat.completions.create({
      model: "openai/gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `
–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —à–∫–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ FluentFox. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º, –∫—É—Ä—Å–∞–º–∏, —É—Ä–æ–≤–Ω—è–º–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏, —Ü–µ–Ω–æ–π –∏ –∑–∞–ø–∏—Å—å—é.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏ –ø–æ –¥—Ä—É–≥–∏–º —Ç–µ–º–∞–º (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø–æ–≥–æ–¥–∞, –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç.–ø.) ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ –≤–µ—Ä–Ω–∏—Å—å –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∫—É—Ä—Å–æ–≤.

–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å, –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–∏—Ç—å—Å—è, –æ–±—ä—è—Å–Ω–∏—Ç—å –≤—ã–≥–æ–¥—ã –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.
`,
        },
        { role: "user", content: userText },
      ],
      headers: {
        "HTTP-Referer": "https://fluentfox.online",
        "X-Title": "FluentFox Assistant",
      },
    });

    const reply = gptResponse.choices[0].message.content;
    ctx.reply(reply);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ GPT:", error);
    ctx.reply("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
  }
});

// üîÅ –î–ª—è Render: —Ñ–µ–π–∫–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä
const http = require("http");

http
  .createServer((req, res) => {
    res.writeHead(200);
    res.end("Telegram bot is running");
  })
  .listen(process.env.PORT || 3000, () => {
    console.log("üåÄ –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", process.env.PORT || 3000);
  });

bot.launch();
console.log("ü§ñ FluentFox GPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–ø—É—â–µ–Ω!");
